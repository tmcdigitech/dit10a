[{"id":0,"href":"/dit10a/relief/","title":"RELIEF LESSON","parent":"10 Digital Tech","content":"(This page will hopefully remain blank.)\n"},{"id":1,"href":"/dit10a/bottleBasics/01helloWorld/","title":"Hello, World!","parent":"Bottle basics","content":"Make a new file named hello.py and enter the following code: 1 2 3 4 5 6 7 from bottle import route, run @route(\u0026#39;/\u0026#39;) def index(): return \u0026#34;Hello, world!\u0026#34; run(reloader=True, debug=True) To run your file, you should be able to press the play button in the top right of the window. Failing that, from the file explorer on the left, right click on your file and choose Open in Integrated Terminal. The terminal will open below the main editor pane. In the terminal, type python hello.py. If you named your file something else, use its name here.\nYou should see this:\nBottle v0.12.19 server starting up (using WSGIRefServer())...\rListening on http://127.0.0.1:8080/\rHit Ctrl-C to quit. If so, it\u0026rsquo;s working! Control-click on the link to open it directly in your browser. You should see \u0026ldquo;Hello, world!\u0026rdquo; in the browser window.\nSo what\u0026rsquo;s going on? 1 from bottle import route, run The first line imports the bits of bottle that we\u0026rsquo;ll be using. In more complicated examples, you\u0026rsquo;ll notice this line will get longer, as we use more parts of the module.\n4 5 def index(): return \u0026#34;Hello, world!\u0026#34; This defines a function called index(). When called it simply returns a string. In time, we\u0026rsquo;ll replace this with something more complicated: a whole HTML document, with CSS styling, generated with a template, customised with data particular to the page and user. But for now, it\u0026rsquo;s a simple string.\n3 @route(\u0026#39;/\u0026#39;) The odd-looking code on line 3 defines what URL patterns should be handled by this function. This weird syntax is a Python shortcut for a function called a decorator. For now, we don\u0026rsquo;t need to worry about the name or how it works, we only need to know how to use it.\nAt this point we\u0026rsquo;ve defined all the parts of our web application, and all that is left is to turn the webserver on and start listening for requests.\n7 run(reloader=True, debug=True) To find out more about the run() function (there are lots of things you fiddle with), look at the bottle.run() page.\n"},{"id":2,"href":"/dit10a/bottleBasics/02moreRoutes/","title":"More routes","parent":"Bottle basics","content":" main.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 from bottle import route, run @route(\u0026#39;/\u0026#39;) def index(): return \u0026#34;\u0026#34;\u0026#34; \u0026lt;h1\u0026gt;Hello, world!\u0026lt;/h1\u0026gt; Go to \u0026lt;a href=\u0026#34;/other\u0026#34;\u0026gt;the other page\u0026lt;/a\u0026gt;. \u0026#34;\u0026#34;\u0026#34; @route(\u0026#39;/other\u0026#39;) def other_page(): return \u0026#34;\u0026#34;\u0026#34; \u0026lt;h1\u0026gt;The other page\u0026lt;/h1\u0026gt; Go back to \u0026lt;a href=\u0026#34;/\u0026#34;\u0026gt;the home page\u0026lt;/a\u0026gt;. \u0026#34;\u0026#34;\u0026#34; run(reloader=True, debug=True) "},{"id":3,"href":"/dit10a/bottleBasics/04fullHtmlExample/","title":"HTML pages","parent":"Bottle basics","content":"This example returns a complete HTML page.\nbase.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;!-- Required meta tags --\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1\u0026#34;\u0026gt; \u0026lt;!-- Bootstrap CSS --\u0026gt; \u0026lt;link href=\u0026#34;https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css\u0026#34; rel=\u0026#34;stylesheet\u0026#34; integrity=\u0026#34;sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Hello, world!\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;Hello, world!\u0026lt;/h1\u0026gt; \u0026lt;!-- Bootstrap Bundle with Popper --\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js\u0026#34; integrity=\u0026#34;sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; "},{"id":4,"href":"/dit10a/bottleBasics/05dbExample/","title":"Databases","parent":"Bottle basics","content":"from BottlePy.org\nSee also this funprojects.blog tutorial.\nmain.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 import sqlite3 from bottle import route, run, debug, template, request, static_file, error @route(\u0026#39;/todo\u0026#39;) def todo_list(): conn = sqlite3.connect(\u0026#39;todo.db\u0026#39;) c = conn.cursor() c.execute(\u0026#34;SELECT id, task FROM todo WHERE status LIKE \u0026#39;1\u0026#39;\u0026#34;) result = c.fetchall() c.close() output = template(\u0026#39;tpl/make_table.html\u0026#39;, rows=result) return output @route(\u0026#39;/new\u0026#39;, method=\u0026#39;GET\u0026#39;) def new_item(): if request.GET.save: new = request.GET.task.strip() conn = sqlite3.connect(\u0026#39;todo.db\u0026#39;) c = conn.cursor() c.execute(\u0026#34;INSERT INTO todo (task,status) VALUES (?,?)\u0026#34;, (new, 1)) new_id = c.lastrowid conn.commit() c.close() return \u0026#39;\u0026lt;p\u0026gt;The new task was inserted into the database, the ID is %s\u0026lt;/p\u0026gt;\u0026#39; % new_id else: return template(\u0026#39;tpl/new_task.html\u0026#39;) @route(\u0026#39;/edit/\u0026lt;no:int\u0026gt;\u0026#39;, method=\u0026#39;GET\u0026#39;) def edit_item(no): if request.GET.save: edit = request.GET.task.strip() status = request.GET.status.strip() if status == \u0026#39;open\u0026#39;: status = 1 else: status = 0 conn = sqlite3.connect(\u0026#39;todo.db\u0026#39;) c = conn.cursor() c.execute(\u0026#34;UPDATE todo SET task = ?, status = ? WHERE id LIKE ?\u0026#34;, (edit, status, no)) conn.commit() return \u0026#39;\u0026lt;p\u0026gt;The item number %s was successfully updated\u0026lt;/p\u0026gt;\u0026#39; % no else: conn = sqlite3.connect(\u0026#39;todo.db\u0026#39;) c = conn.cursor() c.execute(\u0026#34;SELECT task FROM todo WHERE id LIKE ?\u0026#34;, (str(no))) cur_data = c.fetchone() return template(\u0026#39;tpl/edit_task.html\u0026#39;, old=cur_data, no=no) @route(\u0026#39;/item\u0026lt;item:re:[0-9]+\u0026gt;\u0026#39;) def show_item(item): conn = sqlite3.connect(\u0026#39;todo.db\u0026#39;) c = conn.cursor() c.execute(\u0026#34;SELECT task FROM todo WHERE id LIKE ?\u0026#34;, (item,)) result = c.fetchall() c.close() if not result: return \u0026#39;This item number does not exist!\u0026#39; else: return \u0026#39;Task: %s\u0026#39; % result[0] @route(\u0026#39;/help\u0026#39;) def help(): static_file(\u0026#39;help.html\u0026#39;, root=\u0026#39;.\u0026#39;) @route(\u0026#39;/json\u0026lt;json:re:[0-9]+\u0026gt;\u0026#39;) def show_json(json): conn = sqlite3.connect(\u0026#39;todo.db\u0026#39;) c = conn.cursor() c.execute(\u0026#34;SELECT task FROM todo WHERE id LIKE ?\u0026#34;, (json,)) result = c.fetchall() c.close() if not result: return {\u0026#39;task\u0026#39;: \u0026#39;This item number does not exist!\u0026#39;} else: return {\u0026#39;task\u0026#39;: result[0]} @error(403) def mistake403(code): return \u0026#39;There is a mistake in your url!\u0026#39; @error(404) def mistake404(code): return \u0026#39;Sorry, this page does not exist!\u0026#39; run(reloader=True, debug=True) # remember to remove reloader=True and debug(True) when you move your # application from development to a productive environment schema.py 1 2 3 4 5 6 7 8 import sqlite3 conn = sqlite3.connect(\u0026#39;todo.db\u0026#39;) # Warning: This file is created in the current directory conn.execute(\u0026#34;CREATE TABLE todo (id INTEGER PRIMARY KEY, task TEXT NOT NULL, status INTEGER NOT NULL)\u0026#34;) conn.execute(\u0026#34;INSERT INTO todo (task,status) VALUES (\u0026#39;Read A-byte-of-python to get a good introduction into Python\u0026#39;,0)\u0026#34;) conn.execute(\u0026#34;INSERT INTO todo (task,status) VALUES (\u0026#39;Visit the Python website\u0026#39;,1)\u0026#34;) conn.execute(\u0026#34;INSERT INTO todo (task,status) VALUES (\u0026#39;Test various editors for and check the syntax highlighting\u0026#39;,1)\u0026#34;) conn.execute(\u0026#34;INSERT INTO todo (task,status) VALUES (\u0026#39;Choose your favorite WSGI-Framework\u0026#39;,0)\u0026#34;) conn.commit() tpl/edit_task.html 1 2 3 4 5 6 7 8 9 10 11 12 %#template for editing a task %#the template expects to receive a value for \u0026#34;no\u0026#34; as well a \u0026#34;old\u0026#34;, the text of the selected ToDo item \u0026lt;p\u0026gt;Edit the task with ID = {{no}}\u0026lt;/p\u0026gt; \u0026lt;form action=\u0026#34;/edit/{{no}}\u0026#34; method=\u0026#34;get\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;task\u0026#34; value=\u0026#34;{{old[0]}}\u0026#34; size=\u0026#34;100\u0026#34; maxlength=\u0026#34;100\u0026#34;\u0026gt; \u0026lt;select name=\u0026#34;status\u0026#34;\u0026gt; \u0026lt;option\u0026gt;open\u0026lt;/option\u0026gt; \u0026lt;option\u0026gt;closed\u0026lt;/option\u0026gt; \u0026lt;/select\u0026gt; \u0026lt;br\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; name=\u0026#34;save\u0026#34; value=\u0026#34;save\u0026#34;\u0026gt; \u0026lt;/form\u0026gt; tpl/new_task.html 1 2 3 4 5 6 %#template for the form for a new task \u0026lt;p\u0026gt;Add a new task to the ToDo list:\u0026lt;/p\u0026gt; \u0026lt;form action=\u0026#34;/new\u0026#34; method=\u0026#34;GET\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; size=\u0026#34;100\u0026#34; maxlength=\u0026#34;100\u0026#34; name=\u0026#34;task\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; name=\u0026#34;save\u0026#34; value=\u0026#34;save\u0026#34;\u0026gt; \u0026lt;/form\u0026gt; tpl/make_table.html 1 2 3 4 5 6 7 8 9 10 11 %#template to generate a HTML table from a list of tuples (or list of lists, or tuple of tuples or ...) \u0026lt;p\u0026gt;The open items are as follows:\u0026lt;/p\u0026gt; \u0026lt;table border=\u0026#34;1\u0026#34;\u0026gt; %for row in rows: \u0026lt;tr\u0026gt; %for col in row: \u0026lt;td\u0026gt;{{col}}\u0026lt;/td\u0026gt; %end \u0026lt;/tr\u0026gt; %end \u0026lt;/table\u0026gt; "},{"id":5,"href":"/dit10a/bottleBasics/06kitchenSink/","title":"Complete project","parent":"Bottle basics","content":" main.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 import sqlite3 from bottle import route, run, debug, template, request, static_file, error, redirect, abort # only needed when you run Bottle on mod_wsgi # from bottle import default_app @route(\u0026#39;/\u0026#39;) @route(\u0026#39;/todo\u0026#39;) def todo_list(): conn = sqlite3.connect(\u0026#39;todo.db\u0026#39;) c = conn.cursor() c.execute(\u0026#34;SELECT id, task FROM todo WHERE status LIKE \u0026#39;1\u0026#39;\u0026#34;) result_ongoing = c.fetchall() c.execute(\u0026#34;SELECT id, task FROM todo WHERE status LIKE \u0026#39;0\u0026#39;\u0026#34;) result_finished = c.fetchall() c.close() output = template(\u0026#39;tpl/make_table.html\u0026#39;, ongoing=result_ongoing, finished=result_finished) return output @route(\u0026#39;/new\u0026#39;, method=\u0026#39;GET\u0026#39;) def new_item_form(): return template(\u0026#39;tpl/new_task.html\u0026#39;) @route(\u0026#39;/new\u0026#39;, method=\u0026#39;POST\u0026#39;) def new_item_make(): if \u0026#39;task\u0026#39; in request.POST: new = request.POST[\u0026#39;task\u0026#39;].strip() conn = sqlite3.connect(\u0026#39;todo.db\u0026#39;) c = conn.cursor() c.execute(\u0026#34;INSERT INTO todo (task,status) VALUES (?,?)\u0026#34;, (new, 1)) id = c.lastrowid conn.commit() c.close() redirect(f\u0026#39;/#{id}\u0026#39;) @route(\u0026#39;/edit/\u0026lt;id:int\u0026gt;\u0026#39;, method=\u0026#39;GET\u0026#39;) def edit_item(id): if \u0026#39;save\u0026#39; in request.GET: edit = request.GET[\u0026#39;task\u0026#39;].strip() status = int(request.GET[\u0026#39;status\u0026#39;].strip()) conn = sqlite3.connect(\u0026#39;todo.db\u0026#39;) c = conn.cursor() c.execute(\u0026#34;UPDATE todo SET task = ?, status = ? WHERE id LIKE ?\u0026#34;, (edit, status, id)) conn.commit() redirect(f\u0026#39;/#{id}\u0026#39;) elif \u0026#39;delete\u0026#39; in request.GET: conn = sqlite3.connect(\u0026#39;todo.db\u0026#39;) c = conn.cursor() c.execute(\u0026#34;DELETE FROM todo WHERE id LIKE ?\u0026#34;, (str(id))) conn.commit() redirect(f\u0026#39;/#{id}\u0026#39;) else: conn = sqlite3.connect(\u0026#39;todo.db\u0026#39;) c = conn.cursor() c.execute(\u0026#34;SELECT task FROM todo WHERE id LIKE ?\u0026#34;, (str(id))) cur_data = c.fetchone() return template(\u0026#39;tpl/edit_task.html\u0026#39;, old=cur_data, id=id) @route(\u0026#39;/item\u0026lt;item:re:[0-9]+\u0026gt;\u0026#39;) def show_item(item): conn = sqlite3.connect(\u0026#39;todo.db\u0026#39;) c = conn.cursor() c.execute(\u0026#34;SELECT task FROM todo WHERE id LIKE ?\u0026#34;, (item,)) result = c.fetchall() c.close() if not result: return mistake404(404) else: return \u0026#39;Task: %s\u0026#39; % result[0] @route(\u0026#39;/static/\u0026lt;filepath:path\u0026gt;\u0026#39;) def server_static(filepath): return static_file(filepath, root=\u0026#39;./static\u0026#39;) @route(\u0026#39;/help\u0026#39;) def help(): static_file(\u0026#39;help.html\u0026#39;, root=\u0026#39;.\u0026#39;) @route(\u0026#39;/json\u0026lt;json:re:[0-9]+\u0026gt;\u0026#39;) def show_json(json): conn = sqlite3.connect(\u0026#39;todo.db\u0026#39;) c = conn.cursor() c.execute(\u0026#34;SELECT task FROM todo WHERE id LIKE ?\u0026#34;, (json,)) result = c.fetchall() c.close() if not result: return {\u0026#39;task\u0026#39;: \u0026#39;This item number does not exist!\u0026#39;} else: return {\u0026#39;task\u0026#39;: result[0]} @error(403) def mistake403(code): return \u0026#39;There is a mistake in your url!\u0026#39; @error(404) def mistake404(code): return \u0026#39;Sorry, this task does not exist!\u0026#39; debug(True) run(reloader=True) # remember to remove reloader=True and debug(True) when you move your # application from development to a productive environment schema.py 1 2 3 4 5 6 7 8 import sqlite3 conn = sqlite3.connect(\u0026#39;todo.db\u0026#39;) # Warning: This file is created in the current directory conn.execute(\u0026#34;CREATE TABLE todo (id INTEGER PRIMARY KEY, task TEXT NOT NULL, status INTEGER NOT NULL)\u0026#34;) conn.execute(\u0026#34;INSERT INTO todo (task,status) VALUES (\u0026#39;Read A-byte-of-python to get a good introduction into Python\u0026#39;,0)\u0026#34;) conn.execute(\u0026#34;INSERT INTO todo (task,status) VALUES (\u0026#39;Visit the Python website\u0026#39;,1)\u0026#34;) conn.execute(\u0026#34;INSERT INTO todo (task,status) VALUES (\u0026#39;Test various editors for and check the syntax highlighting\u0026#39;,1)\u0026#34;) conn.execute(\u0026#34;INSERT INTO todo (task,status) VALUES (\u0026#39;Choose your favorite WSGI-Framework\u0026#39;,0)\u0026#34;) conn.commit() tpl/base.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;!-- Required meta tags --\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34; /\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1\u0026#34; /\u0026gt; \u0026lt;!-- Bootstrap CSS --\u0026gt; \u0026lt;link href=\u0026#34;https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css\u0026#34; rel=\u0026#34;stylesheet\u0026#34; integrity=\u0026#34;sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34; /\u0026gt; \u0026lt;!-- Our custom CSS --\u0026gt; \u0026lt;link href=\u0026#34;/static/css/base.css\u0026#34; rel=\u0026#34;stylesheet\u0026#34; /\u0026gt; \u0026lt;!-- window/tab label --\u0026gt; \u0026lt;title\u0026gt;Hello, world!\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;h1\u0026gt;{{title or \u0026#39;No title\u0026#39;}}\u0026lt;/h1\u0026gt; {{!base}} \u0026lt;/div\u0026gt; \u0026lt;!-- Bootstrap Bundle with Popper --\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js\u0026#34; integrity=\u0026#34;sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; tpl/edit_task.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 % rebase(\u0026#39;tpl/base.html\u0026#39;,title=f\u0026#34;Edit task\u0026#34;) %#template for editing a task %#the template expects to receive a value for \u0026#34;id\u0026#34; as well a \u0026#34;old\u0026#34;, the text of the selected ToDo item \u0026lt;form action=\u0026#34;/edit/{{id}}\u0026#34; method=\u0026#34;GET\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;input-group mb-3\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;input-group-text\u0026#34; id=\u0026#34;taskId\u0026#34;\u0026gt;{{id}}:\u0026lt;/span\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;task\u0026#34; value=\u0026#34;{{old[0]}}\u0026#34; placeholder=\u0026#34;Buy new shoes for the tortoise\u0026#34; class=\u0026#34;form-control\u0026#34; id=\u0026#34;task\u0026#34; aria-label=\u0026#34;task\u0026#34; aria-describedby=\u0026#34;taskId\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;select name=\u0026#34;status\u0026#34; class=\u0026#34;form-select mb-3\u0026#34; aria-label=\u0026#34;Ongoing or finished\u0026#34;\u0026gt; \u0026lt;option value=\u0026#34;1\u0026#34;\u0026gt;Ongoing\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;0\u0026#34;\u0026gt;Finished\u0026lt;/option\u0026gt; \u0026lt;/select\u0026gt; \u0026lt;div class=\u0026#34;row\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;col-6\u0026#34;\u0026gt;\u0026lt;button name=\u0026#34;save\u0026#34; class=\u0026#34;btn btn-success\u0026#34; type=\u0026#34;submit\u0026#34; id=\u0026#34;button-save\u0026#34;\u0026gt;Save\u0026lt;/button\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;col-6 text-end\u0026#34;\u0026gt;\u0026lt;button name=\u0026#34;delete\u0026#34; class=\u0026#34;btn btn-danger\u0026#34; type=\u0026#34;submit\u0026#34; id=\u0026#34;button-delete\u0026#34;\u0026gt;Delete\u0026lt;/button\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/form\u0026gt; tpl/new_task.html 1 2 3 4 5 6 7 8 9 10 % rebase(\u0026#39;tpl/base.html\u0026#39;,title=\u0026#34;New task\u0026#34;) %#template for the form for a new task \u0026lt;p\u0026gt;Add a new task to the ToDo list:\u0026lt;/p\u0026gt; \u0026lt;form action=\u0026#34;/new\u0026#34; method=\u0026#34;POST\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;input-group mb-3\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;task\u0026#34; class=\u0026#34;form-control\u0026#34; placeholder=\u0026#34;Task description\u0026#34; aria-label=\u0026#34;Task description\u0026#34; aria-describedby=\u0026#34;button-addon2\u0026#34;\u0026gt; \u0026lt;button name=\u0026#34;save\u0026#34; class=\u0026#34;btn btn-outline-success\u0026#34; type=\u0026#34;submit\u0026#34; id=\u0026#34;button-addon2\u0026#34;\u0026gt;Save\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/form\u0026gt; tpl/make_table.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 % rebase(\u0026#39;tpl/base.html\u0026#39;,title=\u0026#34;Todo List\u0026#34;) \u0026lt;p\u0026gt;The open items are as follows:\u0026lt;/p\u0026gt; \u0026lt;table class=\u0026#34;table table-striped\u0026#34;\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th\u0026gt;id\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;task\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; %for row in ongoing: \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;\u0026lt;a id=\u0026#34;{{row[0]}}\u0026#34;\u0026gt;{{row[0]}}\u0026lt;/a\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;{{row[1]}}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt; \u0026lt;a href=\u0026#34;/edit/{{row[0]}}\u0026#34; class=\u0026#34;btn btn-warning btn-sm\u0026#34;\u0026gt;Edit\u0026lt;/a\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; %end \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt; \u0026lt;a href=\u0026#34;/new\u0026#34; class=\u0026#34;btn btn-primary btn-sm\u0026#34;\u0026gt;New task\u0026lt;/a\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; %for row in finished: \u0026lt;tr\u0026gt; \u0026lt;td class=\u0026#34;text-muted\u0026#34;\u0026gt;\u0026lt;a id=\u0026#34;{{row[0]}}\u0026#34;\u0026gt;{{row[0]}}\u0026lt;/a\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;td class=\u0026#34;text-muted\u0026#34;\u0026gt;\u0026lt;del\u0026gt;{{row[1]}}\u0026lt;/del\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt; \u0026lt;a href=\u0026#34;/edit/{{row[0]}}?delete\u0026#34; class=\u0026#34;btn btn-danger btn-sm\u0026#34;\u0026gt;Delete\u0026lt;/a\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; %end \u0026lt;/table\u0026gt; static/css/base.css 1 2 3 4 @import url(\u0026#39;https://fonts.googleapis.com/css2?family=Fredoka:wght@400;700\u0026amp;display=swap\u0026#39;); body { font-family: \u0026#39;Fredoka\u0026#39;; } "},{"id":6,"href":"/dit10a/assessment/01/","title":"1: HTML/CSS Web Development","parent":"Assessment","content":"See in SEQTA\nComplete the HTML/CSS Starter and HTML/CSS Beginner 1 courses in Grok Academy to develop your skills and knowledge in readiness for your web development project. The course covers:\nHTML/CSS Starter Intro to HTML and stylesheets Stylish text, colours, images and links HTML/CSS Beginner 1 Intro to colour and vertical layout Document structure and fancy fonts Grouping elements and styling blocks Laying out a page Once you\u0026rsquo;ve completed this course, you\u0026rsquo;ll be ready to move on to HTML/CSS for Beginners 2.\n"},{"id":7,"href":"/dit10a/assessment/02a/","title":"2a: Flask site checkpoint","parent":"Assessment","content":"Create a flask web app (or use an existing one) that has the following features:\nwhen I go to /name/Barry, it will remember my name is Barry. when I go to /age/15, it will remember my age is 15. when I go to /licence, it will either show: Hello Barry. You will be eligible to get your licence in 1 year.\nor, if the age I entered was at least 16, it will instead show:\nHello Barry. You are eligible to apply for your licence.\nAlso, if the age entered is at least 15, it should add: Would you like to practise for your test?\nThe phrase \u0026ldquo;apply for your licence\u0026rdquo; should be a link to here:\nhttps://www.sa.gov.au/topics/driving-and-transport/licences/learners-permit/apply/myls-course-and-theory-test And the phrase \u0026ldquo;practise for your test\u0026rdquo; should be a link to here:\nhttps://www.mylicence.sa.gov.au/my-car-licence/practice-theory-test "},{"id":8,"href":"/dit10a/reference/","title":"Reference","parent":"10 Digital Tech","content":" Tutorials Python If you are new to Python, or need a quick refresher, here is a good interactive guide you can use:\nAposteriori: Introduction to Python The \u0026ldquo;official\u0026rdquo; Python tutorial, which is bigger, longer, and more thorough:\nThe Python Tutorial Bottle The official Bottle tutorial\nBottle Tutorial A series of YouTube videos on various aspects of Bottle. Some are quite short, a couple are very long:\nBottle Tutorials SQLite SQLite Tutorial\nDocumentation Python Python Standard Library (ver 3.9) Bottle Bottle: Python Web Framework SQLite SQLite official documentation (probably too dense and technical to be much use)\nSQLite Documentation Using SQLite from Python\nSqlite3 module Using SQLite in Bottle\nBottle-SQLite "},{"id":9,"href":"/dit10a/glossary/","title":"Glossary","parent":"10 Digital Tech","content":""},{"id":10,"href":"/dit10a/resources/","title":"Resources","parent":"10 Digital Tech","content":"Introduction to Relational Databases (Oxford)\n"},{"id":11,"href":"/dit10a/","title":"10 Digital Tech","parent":"","content":"Welcome to 10 Digital Tech (Sem 1)!\nThis semester length subject focusses on dynamic websites and relational databases.\nOver the semester, you\u0026rsquo;ll have the opportunity to:\ndesign websites using HTML templates and CSS styling design and implement dynamic functionality by writing Python code using the Bottle micro-framework design and work with relational databases in SQLite learn about and work with ideas like sorting and searching, cookies, authentication, sessions, security, and encryption "},{"id":12,"href":"/dit10a/assessment/","title":"Assessment","parent":"10 Digital Tech","content":""},{"id":13,"href":"/dit10a/glossary/bottleRun/","title":"bottle.run()","parent":"Glossary","content":" 1 app.run(host=\u0026#39;0.0.0.0\u0026#39;, port=\u0026#39;50000\u0026#39;, debug=True) You can just say run(), and it will begin using a set of defaults, but we have customised the server slightly. The reloader flag tells the server to restart every time we change a code file, which saves us from turning it off and on again every time we modify our code. Very handy for development! The debug flag does a something thing for templates.\nThere are a lot of other flags you can use, but two that you might find handy are:\nhost=\u0026quot;localhost\u0026quot; Sets which addresses the server will listen on. Localhost is a magic name that refers to your local machine. By hosting on localhost, only your local machine can access your server, which is ideal for personal things and anything you\u0026rsquo;re developing, which might have bugs or potential weaknesses to exploit. You can choose one of your computer\u0026rsquo;s current IP addresses with, e.g. host=\u0026quot;192.168.1.203\u0026quot;, and now your computer will be visible to other devices connected to that local network. Finally, you can also choose to listen on all available addresses by using host=\u0026quot;0.0.0.0\u0026quot;. port=\u0026quot;8080\u0026quot; Sets which port the server will listen on. You will need administrator access to use a port number below 1024. The default port for HTTP traffic is port 80, and common alternatives are 8080 and 8000. "},{"id":14,"href":"/dit10a/categories/","title":"Categories","parent":"10 Digital Tech","content":""},{"id":15,"href":"/dit10a/reference/strings/","title":"Strings","parent":"Reference","content":"adapted from Medium.com\nLet us see the different operations that can be performed on the below string.\n1 2 3 word = \u0026#39;Sample\u0026#39; len(word) # 6 1 2 3 4 5 +---+---+---+---+---+---+ | S | a | m | p | l | e | +---+---+---+---+---+---+ 0 1 2 3 4 5 6 -6 -5 -4 -3 -2 -1 1 Concatenation Join a string with another string\n1 2 3 word = \u0026#39;Sample\u0026#39; word + \u0026#39; \u0026#39; + \u0026#39;trick\u0026#39; # \u0026#39;Sample trick\u0026#39; 2 Indexed Access of Strings A string in a python can be indexed to perform operations on the string.\nPositive single character\n1 2 3 word = \u0026#39;Sample\u0026#39; word[3] # \u0026#39;p\u0026#39; Negative single character\n1 2 3 word = \u0026#39;Sample\u0026#39; word[-2] # \u0026#39;l\u0026#39; String Reverse\n1 2 3 word = \u0026#39;Sample\u0026#39; word[::-1] # \u0026#39;elpmaS\u0026#39; Reverse string by iterating through string contents.\n1 2 3 4 5 6 7 8 9 10 11 word = \u0026#39;Sample\u0026#39; for char in reversed(word): print(char) ### Output ### e l p m a S 3 Slicing of Strings Slicing allows us to access a substring of characters from a word.\n1 2 3 4 Example 1 word = \u0026#39;Sample\u0026#39; word[0:3] # \u0026#39;Sam\u0026#39; 1 2 3 4 Example 2 word = \u0026#39;Sample\u0026#39; word[4:5] # \u0026#39;le\u0026#39; 1 2 3 4 Example 3 word = \u0026#39;Sample\u0026#39; word[:5] # \u0026#39;Sampl\u0026#39; 4 Remove leading and trailing characters To remove space before and after a string the strip() method can be used has shown below\n1 2 3 4 \u0026#39; Sample \u0026#39;.strip() # \u0026#39;Sample\u0026#39; \u0026#39;sample\u0026#39;.strip(\u0026#39;ple\u0026#39;) # \u0026#39;sam\u0026#39; 5 Left fill with ASCII ‘0’ To left fill with ASCII ‘0’’, we can use zfill() method to make a length of required string width.\n1 2 3 4 \u0026#34;10\u0026#34;.zfill(6) # \u0026#39;000010\u0026#39; \u0026#34;-10\u0026#34;.zfill(6) # \u0026#39;-00010\u0026#39; 6 Find Substring The find() method can be used to extract a substring from a string\n1 2 3 4 \u0026#39;sample\u0026#39;.find(\u0026#39;am\u0026#39;,0,5) # \u0026#39;1\u0026#39; \u0026#39;sam\u0026#39; in \u0026#39;sample\u0026#39; # True 7 Find if the string contains Numbers The isalpha() method can be used to find if a string contains number\n1 2 3 4 5 6 \u0026#39;123\u0026#39;.isalpha() # False \u0026#39;abc\u0026#39;.isalpha() # True \u0026#39;1abc\u0026#39;.isalpha() # False 8 Find if the string is alphanumeric The isalnum() method can be used to find if the string contains alphanumeric and at least one character\n1 2 3 4 \u0026#39; \u0026#39;.isalnum() # False \u0026#39;abc\u0026#39;.isalnum() # True 9 Find if the string is having only whitespace The isspace() method can be used to determine if the string is only whitespace character\n1 2 3 4 \u0026#39; \u0026#39;.isspace() # True \u0026#39;Sample \u0026#39;.isspace() # False 10 Remove Spaces on the left side of the string The lstrip() Strings can be used to remove whitespace characters on the left.\n1 2 3 4 \u0026#39; sample \u0026#39;.lstrip() # \u0026#39;spacious \u0026#39; \u0026#39;www.example.com\u0026#39;.lstrip(\u0026#39;cmowz.\u0026#39;) # \u0026#39;example.com\u0026#39; 11 Remove Spaces on the right side of the string The rstrip() can be used to remove whitespace characters on the left.\n1 2 3 4 \u0026#39; sample \u0026#39;.rstrip() # \u0026#39;spacious \u0026#39; \u0026#39;mississippi\u0026#39;.rstrip(\u0026#39;ipz\u0026#39;) # \u0026#39;mississ\u0026#39; 12 Formatted String Literals The string literals which are prefixed with ‘f’ or ’F’ are called f-string.\n1 2 3 word = \u0026#34;Sample\u0026#34; f\u0026#34;THis is a {word!r} string.\u0026#34; # \u0026#34;THis is a \u0026#39;Sample\u0026#39; string.\u0026#34; 13 Joining multiple strings from a list The join() method can be used to join the strings in a list\n1 2 3 Test = [\u0026#34;This\u0026#34;,\u0026#34;is\u0026#34;,\u0026#34;Sample\u0026#34;] print(\u0026#34; \u0026#34;.join(Test)) # This is Sample 14 Repeat string multiple times Same like nos the strings can be multiplied to generate multiple string\n1 2 3 word = \u0026#34;Sample\u0026#34; print(word*3) # SampleSampleSample 15 Search for multiple prefixes in a string The startswith() and endswith() method can be passed with multiple patterns of substrings to check if it is present.\n1 2 3 4 \u0026#34;sample\u0026#34;.startswith((\u0026#34;sam\u0026#34;,\u0026#34;Sam\u0026#34;)) # True \u0026#34;sample\u0026#34;.endswith((\u0026#34;ple\u0026#34;,\u0026#34;ple.\u0026#34;)) # True 16 Splitting a sentence to word The split() method can be used to split a sentence to multiple words to form a list\n1 2 \u0026#34;This is a Sample\u0026#34;.split() # [\u0026#39;This\u0026#39;, \u0026#39;is\u0026#39;, \u0026#39;a\u0026#39;, \u0026#39;Sample\u0026#39;] 17 Find the frequent word in a sentence The word which occurs most times in a sentence can be found using the below trick\n1 2 3 4 sentence = \u0026#34;She was young the way an actual young person is young\u0026#34; split_sentence = sentence.split() most_frequent_word = max(set(split_sentence),key=split_sentence.count) # \u0026#39;young\u0026#39; 18 Find how many occurences of words in a sentence The below trick helps in finding, how many times the word is present in the sentence sorted by the increasing rate of word occurence.\n1 2 3 4 5 from collections import Counter sentence = \u0026#34;She was young the way an actual young person is young\u0026#34; split_sentence = sentence.split() Counter(split_sentence) # Counter({\u0026#39;young\u0026#39;: 3, \u0026#39;She\u0026#39;: 1, \u0026#39;was\u0026#39;: 1, \u0026#39;the\u0026#39;: 1, \u0026#39;way\u0026#39;: 1, \u0026#39;an\u0026#39;: 1, \u0026#39;actual\u0026#39;: 1, \u0026#39;person\u0026#39;: 1, \u0026#39;is\u0026#39;: 1}) 19 Convert all the words to capital in a sentence The map() method can be used to make all words to capital letters.\n1 2 3 sentence = \u0026#34;Quick brown fox\u0026#34;.split() list(map(str.capitalize,sentence)) # [\u0026#39;Quick\u0026#39;, \u0026#39;Brown\u0026#39;, \u0026#39;Fox\u0026#39;] 20 Remove duplicate words in a sentence Duplicate words in a sentence can be removed has shown below\n1 2 3 sentence = \u0026#34;The sound sounds sound\u0026#34;.split() list(set(sentence)) # [\u0026#39;sound\u0026#39;, \u0026#39;The\u0026#39;, \u0026#39;sounds\u0026#39;] 21 Remove duplicate words retain the sentence order The below trick removes the duplicate word keeping the order of words in the sentence.\n1 2 3 4 from collections import OrderedDict sentence = \u0026#34;The sound sounds sound\u0026#34;.split() list(OrderedDict.fromkeys(sentence).keys()) # [\u0026#39;The\u0026#39;, \u0026#39;sound\u0026#39;, \u0026#39;sounds\u0026#39;] 22 Reversing a sentence The reverse() method can be used to reverse a sentence\n1 2 3 4 sentence = \u0026#34;This is Sample\u0026#34;.split() sentence.reverse() print(sentence) # [\u0026#39;Sample\u0026#39;, \u0026#39;is\u0026#39;, \u0026#39;This\u0026#39;] 23 Splitting words to multiple string The below trick can be used to split a sentence into multiple words and storing in a string variable.\n1 2 3 4 5 sentence = \u0026#34;This is Sample\u0026#34;.split() first_word, second_word, third_word = sentence print(first_word) print(second_word) print(third_word) 24 Combine list using zip() method The zip() method can be used to combine two seperate list of strings.\n1 2 3 4 5 6 7 8 Name = [\u0026#39;Tom\u0026#39;, \u0026#39;Marry\u0026#39;, \u0026#39;Jon\u0026#39;] Age = [\u0026#39;35\u0026#39;, \u0026#39;30\u0026#39;, \u0026#39;40\u0026#39;] for Name, Age in zip(Name,Age): print(Name,Age) ### Output ### Tom 35 Marry 30 Jon 40 25 Sort words in a list using sorted() method The sorted() method can be used to sort the list of strings.\n1 2 sorted([\u0026#39;string1\u0026#39;,\u0026#39;string2\u0026#39;,\u0026#39;string3\u0026#39;],reverse=True) # [\u0026#39;string3\u0026#39;, \u0026#39;string2\u0026#39;, \u0026#39;string1\u0026#39;] "},{"id":16,"href":"/dit10a/tags/","title":"Tags","parent":"10 Digital Tech","content":""},{"id":17,"href":"/dit10a/glossary/URLs/","title":"URLs","parent":"Glossary","content":" \\[\\overbrace{\\text{https}}^{\\text{scheme}}\\text{://} \\overbrace{\\text{tmcdigitech.github.io}}^{\\text{address}} \\text{:}\\overbrace{\\text{8080}}^{\\text{port}} \\overbrace{\\text{/dit10a/glossary/URLs/}}^{\\text{path/endpoint}}\\] The scheme tells the browser how it will connect to the server. This is typically https, but could also be http, ftp, mailto, or any number of others.\nThe address tells the browser where to send the request, i.e. which address. Addresses can be in the form of domain names like google.com, or IP addresses like 192.168.0.1.\ngoogle.com is like saying Thomas More College. 192.168.0.1 is like saying 35 Amsterdam Crescent, Salisbury Downs. localhost is a special value which refers to your own machine. If your server is set to listen to localhost it won\u0026rsquo;t be visible to any other computer at all, which is very useful for developing and testing code which is incomplete and potentially buggy. The path/endpoint tells the browser what to ask the server for, and the server will return the appropriate response based on the path. A path can be as simple as /, or considerably more complicated.\n"},{"id":18,"href":"/dit10a/resources/vscMakeover/","title":"VS Code makeover","parent":"Resources","content":"Visual Studio Code is a fabulous and flexible editor. Here are some things I\u0026rsquo;ve added, which you might like too.\nEditing settings.json When you go to File \u0026gt; Preferences \u0026gt; Settings, all the options you see are stored in a file called settings.json. Enabling or changing some options requires editing the file directly. In this case, you can scroll down the settings page until you find a link called Edit in settings.json.\nFont: Cascadia Code I use the font Cascadia Code, commissioned by Microsoft. It can be downloaded here:\nThe code variant is largely the same as the mono variant, but adds support for ligatures.\nIn settings.json\nBracket colouring Pylance "},{"id":19,"href":"/dit10a/flask/","title":"Working with Flask","parent":"10 Digital Tech","content":"Kitchen sink example\n"}]