<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>10 Digital Tech on TMC - 10 Digital Tech Semester 1</title><link>https://tmcdigitech.github.io/dit10a/</link><description>Recent content in 10 Digital Tech on TMC - 10 Digital Tech Semester 1</description><generator>Hugo -- gohugo.io</generator><language>en-au</language><atom:link href="https://tmcdigitech.github.io/dit10a/index.xml" rel="self" type="application/rss+xml"/><item><title>Hello, World!</title><link>https://tmcdigitech.github.io/dit10a/bottleBasics/01helloWorld/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit10a/bottleBasics/01helloWorld/</guid><description>Make a new file named hello.py and enter the following code: 1 2 3 4 5 6 7 from bottle import route, run @route(&amp;#39;/&amp;#39;) def index(): return &amp;#34;Hello, world!&amp;#34; run(reloader=True, debug=True) To run your file, you should be able to press the play button in the top right of the window. Failing that, from the file explorer on the left, right click on your file and choose Open in Integrated Terminal.</description></item><item><title>More routes</title><link>https://tmcdigitech.github.io/dit10a/bottleBasics/02moreRoutes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit10a/bottleBasics/02moreRoutes/</guid><description> main.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 from bottle import route, run @route(&amp;#39;/&amp;#39;) def index(): return &amp;#34;&amp;#34;&amp;#34; &amp;lt;h1&amp;gt;Hello, world!&amp;lt;/h1&amp;gt; Go to &amp;lt;a href=&amp;#34;/other&amp;#34;&amp;gt;the other page&amp;lt;/a&amp;gt;. &amp;#34;&amp;#34;&amp;#34; @route(&amp;#39;/other&amp;#39;) def other_page(): return &amp;#34;&amp;#34;&amp;#34; &amp;lt;h1&amp;gt;The other page&amp;lt;/h1&amp;gt; Go back to &amp;lt;a href=&amp;#34;/&amp;#34;&amp;gt;the home page&amp;lt;/a&amp;gt;. &amp;#34;&amp;#34;&amp;#34; run(reloader=True, debug=True)</description></item><item><title>HTML pages</title><link>https://tmcdigitech.github.io/dit10a/bottleBasics/04fullHtmlExample/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit10a/bottleBasics/04fullHtmlExample/</guid><description>This example returns a complete HTML page.
base.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 &amp;lt;!doctype html&amp;gt; &amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;!-- Required meta tags --&amp;gt; &amp;lt;meta charset=&amp;#34;utf-8&amp;#34;&amp;gt; &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1&amp;#34;&amp;gt; &amp;lt;!-- Bootstrap CSS --&amp;gt; &amp;lt;link href=&amp;#34;https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css&amp;#34; rel=&amp;#34;stylesheet&amp;#34; integrity=&amp;#34;sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3&amp;#34; crossorigin=&amp;#34;anonymous&amp;#34;&amp;gt; &amp;lt;title&amp;gt;Hello, world!&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;h1&amp;gt;Hello, world!&amp;lt;/h1&amp;gt; &amp;lt;!-- Bootstrap Bundle with Popper --&amp;gt; &amp;lt;script src=&amp;#34;https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js&amp;#34; integrity=&amp;#34;sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p&amp;#34; crossorigin=&amp;#34;anonymous&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt;</description></item><item><title>Databases</title><link>https://tmcdigitech.github.io/dit10a/bottleBasics/05dbExample/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit10a/bottleBasics/05dbExample/</guid><description>from BottlePy.org
See also this funprojects.blog tutorial.
main.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 import sqlite3 from bottle import route, run, debug, template, request, static_file, error @route(&amp;#39;/todo&amp;#39;) def todo_list(): conn = sqlite3.</description></item><item><title>Complete project</title><link>https://tmcdigitech.github.io/dit10a/bottleBasics/06kitchenSink/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit10a/bottleBasics/06kitchenSink/</guid><description>main.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 import sqlite3 from bottle import route, run, debug, template, request, static_file, error, redirect, abort # only needed when you run Bottle on mod_wsgi # from bottle import default_app @route(&amp;#39;/&amp;#39;) @route(&amp;#39;/todo&amp;#39;) def todo_list(): conn = sqlite3.</description></item><item><title>1: HTML/CSS Web Development</title><link>https://tmcdigitech.github.io/dit10a/assessment/01/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit10a/assessment/01/</guid><description>See in SEQTA
Complete the HTML/CSS Starter and HTML/CSS Beginner 1 courses in Grok Academy to develop your skills and knowledge in readiness for your web development project. The course covers:
HTML/CSS Starter Intro to HTML and stylesheets Stylish text, colours, images and links HTML/CSS Beginner 1 Intro to colour and vertical layout Document structure and fancy fonts Grouping elements and styling blocks Laying out a page Once you&amp;rsquo;ve completed this course, you&amp;rsquo;ll be ready to move on to HTML/CSS for Beginners 2.</description></item><item><title>2a: Flask site checkpoint</title><link>https://tmcdigitech.github.io/dit10a/assessment/02a/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit10a/assessment/02a/</guid><description>Create a flask web app (or use an existing one) that has the following features:
when I go to /name/Barry, it will remember my name is Barry. when I go to /age/15, it will remember my age is 15. when I go to /licence, it will either show: Hello Barry. You will be eligible to get your licence in 1 year.
or, if the age I entered was at least 16, it will instead show:</description></item><item><title>bottle.run()</title><link>https://tmcdigitech.github.io/dit10a/glossary/bottleRun/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit10a/glossary/bottleRun/</guid><description>1 app.run(host=&amp;#39;0.0.0.0&amp;#39;, port=&amp;#39;50000&amp;#39;, debug=True) You can just say run(), and it will begin using a set of defaults, but we have customised the server slightly. The reloader flag tells the server to restart every time we change a code file, which saves us from turning it off and on again every time we modify our code. Very handy for development! The debug flag does a something thing for templates.</description></item><item><title>Strings</title><link>https://tmcdigitech.github.io/dit10a/reference/strings/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit10a/reference/strings/</guid><description>adapted from Medium.com
Let us see the different operations that can be performed on the below string.
1 2 3 word = &amp;#39;Sample&amp;#39; len(word) # 6 1 2 3 4 5 +---+---+---+---+---+---+ | S | a | m | p | l | e | +---+---+---+---+---+---+ 0 1 2 3 4 5 6 -6 -5 -4 -3 -2 -1 1 Concatenation Join a string with another string
1 2 3 word = &amp;#39;Sample&amp;#39; word + &amp;#39; &amp;#39; + &amp;#39;trick&amp;#39; # &amp;#39;Sample trick&amp;#39; 2 Indexed Access of Strings A string in a python can be indexed to perform operations on the string.</description></item><item><title>URLs</title><link>https://tmcdigitech.github.io/dit10a/glossary/URLs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit10a/glossary/URLs/</guid><description>\[\overbrace{\text{https}}^{\text{scheme}}\text{://} \overbrace{\text{tmcdigitech.github.io}}^{\text{address}} \text{:}\overbrace{\text{8080}}^{\text{port}} \overbrace{\text{/dit10a/glossary/URLs/}}^{\text{path/endpoint}}\] The scheme tells the browser how it will connect to the server. This is typically https, but could also be http, ftp, mailto, or any number of others.
The address tells the browser where to send the request, i.e. which address. Addresses can be in the form of domain names like google.com, or IP addresses like 192.168.0.1.
google.com is like saying Thomas More College. 192.168.0.1 is like saying 35 Amsterdam Crescent, Salisbury Downs.</description></item><item><title>VS Code makeover</title><link>https://tmcdigitech.github.io/dit10a/resources/vscMakeover/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit10a/resources/vscMakeover/</guid><description>Visual Studio Code is a fabulous and flexible editor. Here are some things I&amp;rsquo;ve added, which you might like too.
Editing settings.json When you go to File &amp;gt; Preferences &amp;gt; Settings, all the options you see are stored in a file called settings.json. Enabling or changing some options requires editing the file directly. In this case, you can scroll down the settings page until you find a link called Edit in settings.</description></item></channel></rss>