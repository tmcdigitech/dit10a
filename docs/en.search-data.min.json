[{"id":0,"href":"/dit10a/glossary/","title":"Glossary","parent":"10 Digital Tech","content":""},{"id":1,"href":"/dit10a/bottleBasics/01helloWorld/","title":"01 Hello, World!","parent":"Bottle basics","content":"Make a new file named hello.py and enter the following code: 1 2 3 4 5 6 7  from bottle import route, run @route(\u0026#39;/\u0026#39;) def index(): return \u0026#34;Hello, world!\u0026#34; run(reloader=True, debug=True)  \nTo run your file, you should be able to press the play button in the top right of the window. Failing that, from the file explorer on the left, right click on your file and choose Open in Integrated Terminal. The terminal will open below the main editor pane. In the terminal, type python hello.py. If you named your file something else, use its name here.\nYou should see this:\nBottle v0.12.19 server starting up (using WSGIRefServer())...\rListening on http://127.0.0.1:8080/\rHit Ctrl-C to quit.\rIf so, it\u0026rsquo;s working! Control-click on the link to open it directly in your browser. You should see \u0026ldquo;Hello, world!\u0026rdquo; in the browser window.\nSo what\u0026rsquo;s going on?    1  from bottle import route, run   The first line imports the bits of bottle that we\u0026rsquo;ll be using. In more complicated examples, you\u0026rsquo;ll notice this line will get longer, as we use more parts of the module.\n4 5  def index(): return \u0026#34;Hello, world!\u0026#34;   This defines a function called index(). When called it simply returns a string. In time, we\u0026rsquo;ll replace this with something more complicated: a whole HTML document, with CSS styling, generated with a template, customised with data particular to the page and user. But for now, it\u0026rsquo;s a simple string.\n3  @route(\u0026#39;/\u0026#39;)   The odd-looking code on line 3 defines what URL patterns should be handled by this function. This weird syntax is a Python shortcut for a function called a decorator. For now, we don\u0026rsquo;t need to worry about the name or how it works, we only need to know how to use it.\nAt this point we\u0026rsquo;ve defined all the parts of our web application, and all that is left is to turn the webserver on and start listening for requests.\n7  run(reloader=True, debug=True)   To find out more about the run() function (there are lots of things you fiddle with), look at the bottle.run() page.\n"},{"id":2,"href":"/dit10a/","title":"10 Digital Tech","parent":"","content":"Welcome to 10 Digital Tech (Sem 1)!\nThis semester length subject focusses on dynamic websites and relational databases.\nOver the semester, you\u0026rsquo;ll have the opportunity to:\n design websites using HTML templates and CSS styling design and implement dynamic functionality by writing Python code using the Bottle micro-framework design and work with relational databases in SQLite learn about and work with ideas like sorting and searching, cookies, authentication, sessions, security, and encryption  "},{"id":3,"href":"/dit10a/bottleBasics/","title":"Bottle basics","parent":"10 Digital Tech","content":""},{"id":4,"href":"/dit10a/glossary/bottleRun/","title":"bottle.run()","parent":"Glossary","content":"run(reloader=True, debug=True) You can just say run(), and it will begin using a set of defaults, but we have customised the server slightly. The reloader flag tells the server to restart every time we change a code file, which saves us from turning it off and on again every time we modify our code. Very handy for development! The debug flag does a something thing for templates.\nThere are a lot of other flags you can use, but two that you might find handy are:\n host=\u0026quot;localhost\u0026quot; Sets which addresses the server will listen on. Localhost is a magic name that refers to your local machine. By hosting on localhost, only your local machine can access your server, which is ideal for personal things and anything you\u0026rsquo;re developing, which might have bugs or potential weaknesses to exploit. You can choose one of your computer\u0026rsquo;s current IP addresses with, e.g. host=\u0026quot;192.168.1.203\u0026quot;, and now your computer will be visible to other devices connected to that local network. Finally, you can also choose to listen on all available addresses by using host=\u0026quot;0.0.0.0\u0026quot;. port=\u0026quot;8080\u0026quot; Sets which port the server will listen on. You will need administrator access to use a port number below 1024. The default port for HTTP traffic is port 80, and common alternatives are 8080 and 8000.  "},{"id":5,"href":"/dit10a/categories/","title":"Categories","parent":"10 Digital Tech","content":""},{"id":6,"href":"/dit10a/reference/","title":"Reference","parent":"10 Digital Tech","content":"Tutorials    Python    If you are new to Python, or need a quick refresher, here is a good interactive guide you can use:\n Aposteriori: Introduction to Python  The \u0026ldquo;official\u0026rdquo; Python tutorial, which is bigger, longer, and more thorough:\n The Python Tutorial  Bottle    The official Bottle tutorial\n Bottle Tutorial  A series of YouTube videos on various aspects of Bottle. Some are quite short, a couple are very long:\n Bottle Tutorials  SQLite    SQLite Tutorial\nDocumentation    Python     Python Standard Library (ver 3.9)  Bottle     Bottle: Python Web Framework  SQLite    SQLite official documentation (probably too dense and technical to be much use)\n SQLite Documentation  Using SQLite from Python\n Sqlite3 module  Using SQLite in Bottle\n Bottle-SQLite  "},{"id":7,"href":"/dit10a/tags/","title":"Tags","parent":"10 Digital Tech","content":""},{"id":8,"href":"/dit10a/glossary/URLs/","title":"URLs","parent":"Glossary","content":"    \\[\\overbrace{\\text{https}}^{\\text{scheme}}\\text{://} \\overbrace{\\text{tmcdigitech.github.io}}^{\\text{address}} \\text{:}\\overbrace{\\text{8080}}^{\\text{port}} \\overbrace{\\text{/dit10a/glossary/URLs/}}^{\\text{path/endpoint}}\\]  The scheme tells the browser how it will connect to the server. This is typically https, but could also be http, ftp, mailto, or any number of others.\nThe address tells the browser where to send the request, i.e. which address. Addresses can be in the form of domain names like google.com, or IP addresses like 192.168.0.1.\n google.com is like saying Thomas More College. 192.168.0.1 is like saying 35 Amsterdam Crescent, Salisbury Downs. localhost is a special value which refers to your own machine. If your server is set to listen to localhost it won\u0026rsquo;t be visible to any other computer at all, which is very useful for developing and testing code which is incomplete and potentially buggy.  The path/endpoint tells the browser what to ask the server for, and the server will return the appropriate response based on the path. A path can be as simple as /, or considerably more complicated.\n"}]